components:
  schemas:
    LoginRequest:
      properties:
        email:
          example: akshay@example.com
          type: string
        password:
          example: securepass123
          type: string
      required:
      - email
      - password
      type: object
    RegisterRequest:
      properties:
        email:
          example: akshay@example.com
          type: string
        name:
          example: Akshay Patil
          type: string
        password:
          example: securepass123
          type: string
      required:
      - name
      - email
      - password
      type: object
    Subtask:
      properties:
        deadline:
          example: '2025-07-27'
          format: date
          type: string
        status:
          example: in progress
          type: string
        subject:
          example: Set up models
          type: string
      type: object
    SubtaskList:
      properties:
        subtasks:
          items:
            $ref: '#/components/schemas/Subtask'
          type: array
      type: object
    Task:
      properties:
        deadline:
          example: '2025-08-01'
          format: date
          type: string
        status:
          example: pending
          type: string
        subject:
          example: Design database
          type: string
      required:
      - subject
      - deadline
      - status
      type: object
    TokenResponse:
      properties:
        token:
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          type: string
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
info:
  description: API for user registration, login, and task/subtask management with
    JWT authentication.
  title: Task Manager API
  version: 1.0.0
openapi: 3.0.0
paths:
  /auth/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Login successful, returns JWT
      summary: Login user
      tags:
      - Auth
  /auth/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: User registered successfully
      summary: Register a new user
      tags:
      - Auth
  /tasks:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
          description: List of tasks
      security:
      - bearerAuth: []
      summary: Get all non-deleted tasks and subtasks for a user
      tags:
      - Tasks
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '201':
          description: Task created
      security:
      - bearerAuth: []
      summary: Create a new task
      tags:
      - Tasks
  /tasks/{taskId}:
    delete:
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Task marked as deleted
      security:
      - bearerAuth: []
      summary: Soft delete a task
      tags:
      - Tasks
    put:
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated
      security:
      - bearerAuth: []
      summary: Update a task
      tags:
      - Tasks
  /tasks/{taskId}/subtasks:
    get:
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subtask'
                type: array
          description: List of subtasks
      security:
      - bearerAuth: []
      summary: Get all non-deleted subtasks for a task
      tags:
      - Tasks
    put:
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubtaskList'
        required: true
      responses:
        '200':
          description: Updated subtasks list
      security:
      - bearerAuth: []
      summary: Replace subtasks list (excluding deleted)
      tags:
      - Tasks
servers:
- url: http://localhost:5000
tags:
- name: Auth
- name: Tasks
